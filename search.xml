<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>swift简介</title>
    <url>/2020/06/13/swift-jian-jie/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Swift是供iOS和OS X应用编程的新编程语言，基于C和Objective-C，而却没有C的一些兼容约束。Swift采用了安全的编程模式和添加现代的功能来是的编程更加简单、灵活和有趣。界面则基于广受人民群众爱戴的Cocoa和Cocoa Touch框架，展示了软件开发的新方向。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/06/apple-swift.jpg" alt="apple-swift"></p>
<p>Swift已经存在了多年。Apple基于已有的编译器、调试器、框架作为其基础架构。通过ARC(Automatic Reference Counting，自动引用计数)来简化内存管理。我们的框架栈则一直基于Cocoa。Objective-C进化支持了块、collection literal和模块，允许现代语言的框架无需深入即可使用。感谢这些基础工作，才使得可以在Apple软件开发中引入新的编程语言。</p>
<p>Objective-C开发者会感到Swift的似曾相识。Swift采用了Objective-C的命名参数和动态对象模型。提供了对Cocoa框架和mix-and-match的互操作性。基于这些基础，Swift引入了很多新功能和结合面向过程和面向对象的功能。</p>
<p>Swift对新的程序员也是友好的。他是工业级品质的系统编程语言，却又像脚本语言一样的友好。他支持playground，允许程序员实验一段Swift代码功能并立即看到结果，而无需麻烦的构建和运行一个应用。</p>
<p>Swift集成了现代编程语言思想，以及Apple工程文化的智慧。编译器是按照性能优化的，而语言是为开发优化的，无需互相折中。可以从”Hello, world”开始学起并过渡到整个系统。所有这些使得Swift成为Apple软件开发者创新的源泉。</p>
<p>Swift是编写iOS和OSX应用的梦幻方式，并且会持续推进新功能的引入。我们迫不及待的看到你用他来做点什么。</p>
<h3 id="Swift入门"><a href="#Swift入门" class="headerlink" title="Swift入门"></a>Swift入门</h3><p>一个新语言的学习应该从打印”Hello, world”开始。在Swift，就是一行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println(&quot;Hello, world&quot;)</span><br></pre></td></tr></table></figure>

<p>如果你写过C或Objective-C代码，这个语法看起来很熟悉，在Swift，这就是完整的程序了。你无需导入(import)一个单独的库供输入输出和字符串处理。全局范围的代码就是用于程序的入口，所以你无需编写一个 main() 函数。你也无需在每个语句后写分号。 这个入门会给出足够的信息教你完成一个编程任务。无需担心你还不理解一些东西，所有没解释清楚的，会在本书后续详细讲解。</p>
<p><strong>注意：</strong> 作为最佳实践，可以将本章在Xcode的playground中打开。Playground允许你编辑代码并立即看到结果。</p>
<h3 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h3><p>使用 let 来定义常量， var 定义变量。常量的值无需在编译时指定，但是至少要赋值一次。这意味着你可以使用常量来命名一个值，你发现只需一次确定，却用在多个地方。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myVariable &#x3D; 42</span><br><span class="line">myVariable &#x3D; 50</span><br><span class="line">let myConstant &#x3D; 42</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 这里的常量定义类似于函数式编程语言中的变量，一次赋值后就无法修改。多多使用有益健康。</p>
<p>一个常量或变量必须与赋值时拥有相同的类型。因此你不用严格定义类型。提供一个值就可以创建常量或变量，并让编译器推断其类型。在上面例子中，编译其会推断myVariable是一个整数类型，因为其初始化值就是个整数。</p>
<p><strong>注意：</strong> 类型与变量名绑定，属于静态类型语言。有助于静态优化。与Python、JavaScript等有所区别。 如果初始化值没有提供足够的信息(或没有初始化值)，可以在变量名后写类型，以冒号分隔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let imlicitInteger &#x3D; 70</span><br><span class="line">let imlicitDouble &#x3D; 70.0</span><br><span class="line">let explicitDouble: Double &#x3D; 70</span><br></pre></td></tr></table></figure>

<p>值永远不会隐含转换到其他类型。如果你需要转换一个值到不同类型，明确的构造一个所需类型的实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let label &#x3D; &quot;The width is &quot;</span><br><span class="line">let width &#x3D; 94</span><br><span class="line">let widthLabel &#x3D; label + String(width)</span><br></pre></td></tr></table></figure>

<p>还有更简单的方法来在字符串中包含值：以小括号来写值，并用反斜线(“”)放在小括号之前。例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let apples &#x3D; 3</span><br><span class="line">let oranges &#x3D; 5     </span><br><span class="line">let appleSummary &#x3D; &quot;I have \(apples) apples.&quot;</span><br><span class="line">let fruitSummary &#x3D; &quot;I have \(apples + oranges) pieces of fruit.&quot;</span><br></pre></td></tr></table></figure>

<p>创建一个数组和字典使用方括号 “[]” ，访问其元素则是通过方括号中的索引或键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var shoppingList &#x3D; [&quot;catfish&quot;, &quot;water&quot;, &quot;tulips&quot;, &quot;blue paint&quot;]</span><br><span class="line">shoppingList[1] &#x3D; &quot;bottle of water&quot;</span><br><span class="line"></span><br><span class="line">var occupations &#x3D; [</span><br><span class="line">   &quot;Malcolm&quot;: &quot;Captain&quot;,</span><br><span class="line">   &quot;Kaylee&quot;: &quot;Mechanic&quot;,</span><br><span class="line">]</span><br><span class="line">occupations[&quot;Jayne&quot;] &#x3D; &quot;Public Relations&quot;</span><br></pre></td></tr></table></figure>

<p>要创建一个空的数组或字典，使用初始化语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let emptyArray &#x3D; String[]()</span><br><span class="line">let emptyDictionary &#x3D; Dictionary&lt;String, Float&gt;()</span><br></pre></td></tr></table></figure>

<p>如果类型信息无法推断，你可以写空的数组为 “[]” 和空的字典为 “[:]”，例如你设置一个知道变量并传入参数到函数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shoppingList &#x3D; []   &#x2F;&#x2F;去购物并买些东西</span><br></pre></td></tr></table></figure>

<h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><p>使用 if 和 switch 作为条件控制。使用 for-in 、 for 、 while 、 do-while 作为循环。小括号不是必须的，但主体的大括号是必需的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let individualScores &#x3D; [75, 43, 103, 87, 12]</span><br><span class="line">var teamScore &#x3D; 0</span><br><span class="line">for score in individualScores &#123;</span><br><span class="line">    if score &gt; 50 &#123;</span><br><span class="line">        teamScores +&#x3D; 3</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        teamScores +&#x3D; 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">teamScore</span><br></pre></td></tr></table></figure>

<p>在 if 语句中，条件必须是布尔表达式，这意味着 if score { … } 是错误的，不能隐含的与0比较。 你可以一起使用 if 和 let 来防止值的丢失。这些值是可选的。可选值可以包含一个值或包含一个 nil 来指定值还不存在。写一个问号 “?” 在类型后表示值是可选的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var optionalString: String? &#x3D; &quot;Hello&quot;</span><br><span class="line">optionalString &#x3D;&#x3D; nil</span><br><span class="line"></span><br><span class="line">var optionalName: String? &#x3D; &quot;John Appleseed&quot;</span><br><span class="line">var greeting &#x3D; &quot;Hello!&quot;</span><br><span class="line">if let name &#x3D; optionalName &#123;</span><br><span class="line">    greeting &#x3D; &quot;Hello, \(name)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>（三）搭建自己的v2ray</title>
    <url>/2020/06/12/da-jian-zi-ji-de-v2ray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        总体说来，用这些插件或者免费的服务，不如用自己的更安心。不过搭建自己的v2ray需要投入一些成本和时间。对于普通朋友来说，如果你只想简单的科学上网，那么最好的方式就是购买别人搭建好的vpn（特别提醒，一定要选择大的平台，我之前使用过的“零点云”个人感觉还不错，一年不到100元）一般而言这些大平台的稳定性和速度都会比自己搭建的更加好，价格也会比自己搭建更便宜。</p>
<p>​        对于那些爱折腾或者想了解一下过程的朋友就可以继续往下看了。</p>
<p>​        主要的流程是：1）购买vps服务器</p>
<p>​                                   2）搭建v2ray</p>
<p>​                                   3）在自己的电脑安装v2ray软件</p>
<p>​                                   4）连接&amp;快乐上网</p>
<h3 id="购买vps服务器"><a href="#购买vps服务器" class="headerlink" title="购买vps服务器"></a>购买vps服务器</h3><p>​        我们选择的vps供应商的时候需要满足以下3个条件：</p>
<p>​        1.vps服务器本身能够访问外网。也就是说国内的vps基本都不行。</p>
<p>​        2.我们能够与服务器之间建立连接。有些时候我们会发现我们无法于一些国外服务器建立连接，最可能的原因就是：这台服务器的ip地址，之前被他人用于搭建翻墙的服务器，但是由于操作不当或其他原因被GFW发现，于是GFW就将这个ip给封锁了，之后你就不能通过国内的网络访问这个ip了。当然，我们自己搭建的时候也会遇到各种问题，新手上路难免被GFW发现，因此选择一个能免费换ip的vps供应商对新生而言就至关重要。</p>
<p>​        3.vps供应商允许你搭建v2ray等服务。例如：阿里云等vps供应商就禁止你搭建自己的梯子（所谓搭梯子就是搭建自己的shadowsocks或v2ray）当你在阿里云的vps搭梯子时，会收到阿里云的邮件警告，如果继续搭梯子有可能会对你封号。</p>
<p>​        在这里我推荐的是<a href="https://www.vultr.com/?ref=8599573-6G" target="_blank" rel="noopener">Vultr</a>。Vultr是按小时计费的，一个便宜的服务器一个月是5美元，其他vps可能也有5美元左右一个月的价格，但是很多都需要你购买一年。充值最低是10美元，可以使用支付宝支付（这个还是很方便的）第一次充值会送你100美元（这100美元要在第一个月用完），所以你可以在第一个月开很多高性能的服务器，并对不同地区的服务器做一个测试，看看那个地方的服务器速度最快。Vultr最大的好处就是可以免费更换ip，只要删除你的vps再重新建立一个vps就可以更换ip了。具体操作方法在后面会说明。</p>
<p>​        下面我就讲讲vultr的购买方式，点击<a href="https://www.vultr.com/?ref=8599573-6G" target="_blank" rel="noopener">Vultr</a>进入官网。输入电子邮箱和密码点击注册就OK，邮箱需要写自己的邮箱（之后会发验证码和一些重要信息）其他的信息如电话号码，地址信息可以随意填写。注册完成并登录后可以来到Vultr的主页，接着可以点击左边的Billing进行充值（当然你也可以先到别的页面看一看）</p>
<p>Billing页面选择Alipay（支付宝）进行支付即可。</p>
<p><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/Vultr%E6%94%AF%E4%BB%98%E9%A1%B5%E9%9D%A2.png" alt="Vultr支付页面"></p>
<p>接着来到Products页面，并点击中间的“Deploy Instance”部署一个vps。</p>
<p><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E5%BB%BA%E7%AB%8B%E7%95%8C%E9%9D%A21.png" alt="建立界面1"></p>
<p>这里选择“Cloud Compute”，我随便选了一个“Atlant”（亚特兰大）的节点，大家可以多搭建几个不同地区的服务器试试速度。</p>
<p>系统选择“Ubuntu20”，然后选择5美元一个月（它下面有写是按照小时扣费的，约0.007美元一小时。第一个月有100美元可以奢侈一把）</p>
<p><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E5%BB%BA%E7%AB%8B%E7%95%8C%E9%9D%A23.png" alt="建立界面3"></p>
<p>最后勾选”Enable IPv6 Enable“和“Enable Private Networking ”，然后再给它取个名字，我的给我的服务器取名叫“mars”。最后点击“Deploy Now”就开始部署了，只需要耐心等待3/5分钟，服务器显示绿色的“running”就完成啦。</p>
<h3 id="搭建v2ray"><a href="#搭建v2ray" class="headerlink" title="搭建v2ray"></a>搭建v2ray</h3><p>​        部署玩服务器后进入服务器的管理页面，我们就可以用自带的连接页面进入命令行了。不过在此之前我们需要做的事情是确认我们能够与服务器之间建立连接。</p>
<p><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A21.png" alt="管理界面"></p>
<h4 id="测试能否ping通，并建立ssh连接"><a href="#测试能否ping通，并建立ssh连接" class="headerlink" title="测试能否ping通，并建立ssh连接"></a>测试能否ping通，并建立ssh连接</h4><p>只需要打开我们电脑的终端输入（这里的66.42.92.162需要换成你自己的ip地址）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 66.42.92.162</span><br></pre></td></tr></table></figure>

<p>正常情况下你将看到如下的结果，说明你可以和你的vps建立联系。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">64 bytes from 66.42.92.162: icmp_seq=0 ttl=45 time=358.799 ms</span><br><span class="line">64 bytes from 66.42.92.162: icmp_seq=1 ttl=45 time=378.370 ms</span><br><span class="line">64 bytes from 66.42.92.162: icmp_seq=2 ttl=46 time=405.829 ms</span><br></pre></td></tr></table></figure>

<p>但如果一直都显示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Request timeout for icmp_seq 0</span><br><span class="line">Request timeout for icmp_seq 1</span><br><span class="line">Request timeout for icmp_seq 2</span><br></pre></td></tr></table></figure>

<p>那就是你这个主机的ip被GFW墙了，这个时候你就只能点击右上角的彻底删除，并重复步骤一（你也可以先重开一台vps再删除，这样你可以确保第二次不会拿到和第一次一样的ip）。</p>
<p>如果可以链接成功，那我们我们就可以使用<a href="https://www.netsarang.com/zh/xshell/" target="_blank" rel="noopener">xshel</a>（windows）或<a href="http://www.hostbuf.com/downloads/finalshell_install.pkg" target="_blank" rel="noopener">finalshell</a>（mac）与vps进行ssh链接了。（这两个软件相比右上角自带的命令控制台最大的好处就是可以复制粘贴，当然还有其他的很多功能）</p>
<p>下载安装后我们进入finalshell的页面，并建立一个与vps的ssh连接。<br><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E9%93%BE%E6%8E%A5vps.png" alt="链接vps"></p>
<p>之后双击新建的mars主机与其连接，第一次连接时会让你接受密钥，选择接受并保存。<br><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E6%8E%A5%E5%8F%97%E5%AF%86%E9%92%A5.png" alt="接受密钥"></p>
<h4 id="安装BBR-PLUS"><a href="#安装BBR-PLUS" class="headerlink" title="安装BBR PLUS"></a>安装BBR PLUS</h4><p>首先查看内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>这个是我的内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Linux mars 5.4.0-31-generic #35-Ubuntu SMP Thu May 7 20:20:34 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>在我们开始搭建v2ray之前我们首先要安装BBR Plus。这个是用来加速的，vultr的主机基本都已经安装了BBR，但BBR Plus效果更好一些。我们使用一键安装脚本来安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O tcp.sh https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>

<p>会显示如下页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> TCP加速 一键安装管理脚本 [v1.3.1]</span><br><span class="line">  -- 就是爱生活 | 94ish.me --</span><br><span class="line">  </span><br><span class="line"> 0. 升级脚本</span><br><span class="line">————————————内核管理————————————</span><br><span class="line"> 1. 安装 BBR/BBR魔改版内核</span><br><span class="line"> 2. 安装 BBRplus版内核 </span><br><span class="line"> 3. 安装 Lotserver(锐速)内核</span><br><span class="line">————————————加速管理————————————</span><br><span class="line"> 4. 使用BBR加速</span><br><span class="line"> 5. 使用BBR魔改版加速</span><br><span class="line"> 6. 使用暴力BBR魔改版加速(不支持部分系统)</span><br><span class="line"> 7. 使用BBRplus版加速</span><br><span class="line"> 8. 使用Lotserver(锐速)加速</span><br><span class="line">————————————杂项管理————————————</span><br><span class="line"> 9. 卸载全部加速</span><br><span class="line"> 10. 系统配置优化</span><br><span class="line"> 11. 退出脚本</span><br><span class="line">————————————————————————————————</span><br><span class="line"></span><br><span class="line"> 当前状态: 已安装 BBR 加速内核 , BBR启动成功</span><br><span class="line"></span><br><span class="line"> 请输入数字 [0-11]:</span><br></pre></td></tr></table></figure>

<p>我们选择2，之后它会进行安装，并跳出如下界面，我们需要选择no</p>
<p><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E5%AE%89%E8%A3%85bbrplus.png" alt="安装bbrplus"></p>
<p>之后我们要重启，会与vps断开连接。我们可以等30秒后再次与vps连接（随便按一下就会重新连接）。</p>
<p>我们继续打开脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure>

<p>选择7，我们的BBR Plus就安装好了。</p>
<h4 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h4><p>安装v2ray，同样的有一键安装脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<p>输入1进行安装，并选择一系列参数（默认的只要回车就可以，一般来说只需要选择一个自己喜欢的端口，不要小于3000）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">V2Ray 传输协议 = TCP</span><br><span class="line"></span><br><span class="line">V2Ray 端口 = 9999</span><br><span class="line"></span><br><span class="line">是否配置 Shadowsocks = 未配置</span><br></pre></td></tr></table></figure>

<p>之后一路回车，完成配置。输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">v2ray url</span><br></pre></td></tr></table></figure>

<p>生成 vmess URL 链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vmess://ewoidiI6ICIyIiwKInBzIjogIjIzM3YyLmNvbV82Ni40Mi45Mi4xNjIiLAoiYWRkIjogIjY2LjQyLjkyLjE2MiIsCiJwb3J0IjogIjk5OTkiLAoiaWQiOiAiNmFjOTU1MmMtZmFlNy00MTUwLWJjMzAtMTYzYTQzMzU1NDQzIiwKImFpZCI6ICIyMzMiLAoibmV0IjogInRjcCIsCiJ0eXBlIjogIm5vbmUiLAoiaG9zdCI6ICIiLAoicGF0aCI6ICIiLAoidGxzIjogIiIKfQo=</span><br></pre></td></tr></table></figure>

<h4 id="使用并测速"><a href="#使用并测速" class="headerlink" title="使用并测速"></a>使用并测速</h4><p>现在我们打开自己电脑上的v2ray客户端（<a href="https://github.com/yanue/V2rayU/releases/download/2.2.0/V2rayU.dmg" target="_blank" rel="noopener">mac版下载V2rayU.dmg</a>）（<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN-Core.zip" target="_blank" rel="noopener">windows版下载</a>）进行连接。</p>
<p>选择”服务器设置”导入刚才的那串 vmess:<br><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E5%AF%BC%E5%85%A5v2ray.png" alt="导入v2ray"><br>之后在服务区列表选择自己搭建的节点，就OK啦！<br>来个4k视频体验一下速度把！（记得把浏览器上的其他科学上网插件都关掉哦）</p>
<p><img src="/images/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84v2ray/%E6%B5%8B%E9%80%9F.png" alt="测速"></p>
<p>v2ray可是可以配置Shadowsocks大家可以自己研究捣鼓一下哦！</p>
<p>ps：不同节点速度差异还是挺大的，大家可以先去<a href="https://vultr.wiki/speed-test" target="_blank" rel="noopener">这里</a>下载一下100m的测速包，大致感受一下下载速度。</p>
<p>以下是我感觉速度还不错的节点（记得区分延迟和速度哦，ping 的是延迟，下载最直观的是速度，一般来说不打游戏打话，延迟不是太大的问题哦）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">New York / New Jersey[美东 新泽西]</span><br><span class="line">Seattle, Washington[美东 华盛顿州 西雅图]</span><br><span class="line">Atlanta, Georgiaa[美东 乔治亚州 亚特兰大]</span><br><span class="line">(Asia)Tokyo, Japan[日本 东京]</span><br><span class="line">Singapore[新加坡]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>（二）利用谷歌上网助手科学上网</title>
    <url>/2020/06/12/gu-ge-shang-wang-zhu-shou/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><hr>
<h3 id="利用谷歌上网助手科学上网"><a href="#利用谷歌上网助手科学上网" class="headerlink" title="利用谷歌上网助手科学上网"></a>利用谷歌上网助手科学上网</h3><p>​        在了解了背景知识后，终于来到了正题如何最简单的上外网呢？今天我只讲一下最简单的通过谷歌助手插件上网。之后我也会更新其他科学上网方式。</p>
<h4 id="第一步，下载谷歌浏览器。"><a href="#第一步，下载谷歌浏览器。" class="headerlink" title="第一步，下载谷歌浏览器。"></a>第一步，下载谷歌浏览器。</h4><p>​        在<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">官网下载</a>谷歌浏览器，打开超链接，点击网站中间的“下载Chrome”。下载后，根据提示安装即可。</p>
<h4 id="第二步，安装谷歌上网助手"><a href="#第二步，安装谷歌上网助手" class="headerlink" title="第二步，安装谷歌上网助手"></a>第二步，安装谷歌上网助手</h4><p>​        在没有翻墙的情况下，谷歌浏览器并不能上外网，它只是一个普通的浏览器，但是我们可以通过谷歌浏览器的插件，实现简单的上外网。谷歌上网助手就可以帮助我们使用谷歌搜索，访问谷歌应用商店等功能。</p>
<p>​        谷歌浏览助手可以在谷歌应用商店中下载，然而谷歌应用商店必须要翻墙才能访问，于是就陷入了死循环。so 我已经帮各位将其下载好啦。（<a href="/download/谷歌上网助手/2.2.1_0.zip">点击下载谷歌上网助手</a>）</p>
<p>​        下载好连接中的文件并解压，打开后有一个“2.2.1_0”的文件夹。我们需要将其拖入谷歌浏览器的扩展程序中。扩展程序的打开方式如下图所示。</p>
<p><img src="/images/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/%E6%8B%93%E5%B1%95%E7%A8%8B%E5%BA%8F%E4%BD%8D%E7%BD%AE.jpg" alt="拓展程序位置"></p>
<p>​        打开后是如下页面，我们需要将右上角开发者模式的卡关打开。</p>
<p><img src="/images/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/%E6%8B%93%E5%B1%95%E7%A8%8B%E5%BA%8F%E7%95%8C%E9%9D%A2.jpg" alt="拓展程序界面"></p>
<p>​        点击左上角“加载已解压的扩展程序”，将刚才下载解压后的“2.2.1_0”的文件夹载入，就安装完成啦。安装完成后，不要删除解压后的2.2.1_0”的文件夹。（如果有强迫症，可以找到电脑中的 Google/Chrome/Default/Extensions处，将整个文件放到这里）</p>
<h4 id="第三步，注册谷歌上网助手。"><a href="#第三步，注册谷歌上网助手。" class="headerlink" title="第三步，注册谷歌上网助手。"></a>第三步，注册谷歌上网助手。</h4><p>​        点击右上角的图标，根据提示注册，可以使用任何邮箱注册。注册后再登陆。当点击图标出现如下界面就成功啦。</p>
<p><img src="/images/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/%E6%B3%A8%E5%86%8C%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B.jpg" alt="注册谷歌上网助手"></p>
<p>​        如果出现报错的提示，直接忽略就好，如果遇到无法解决的问题可以给我发邮件，我会尽力帮忙。</p>
<p>​        这时可以在谷歌中搜索或者访问左上角的应用商店下载更多好用的插件啦。（可能速度不是很快，可以稍微耐心等待几秒喔）建议先下载一个其他的科学上网软件，如：Astar VPN，然后删除自己安装的谷歌上网助手，再去应用商店重新下载（因为自己的安装的序列号不匹配，可能会报错，虽然不影响使用）。</p>
<p>ps：谷歌上网助手不可以上YouTube，大家可以在谷歌应用商店使用其他科学上网插件，或者看我之后的博客。</p>
]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>（一）科学上网介绍</title>
    <url>/2020/04/30/ke-xue-shang-wang-jie-shao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><hr>
<h3 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h3><p>​        众所周知谷歌是一个优秀的学习工具，在谷歌可以查到许多的博客和英文的文献，特别是对于学习计算机相关方面的学生来说，谷歌更是不可或缺的。但是由于GFW ( 防火长城 ) 的存在，在中国大陆，自2010年起就不能访问外网了，谷歌也被列入外网行列。</p>
<p>​        而到目前为止，Google的所有产品在中国大陆境内均无法正常访问。提到翻墙（也就是我们常听到的“科学上网”或者“爱国上网”），有几个词很常见，即vpn、vps、Proxy和shadowsocks。刚接触翻墙的时候很容易被这个词的意思混淆。我们就在尽可能忽略那些晦涩难懂的技术细节，简单地讨论下翻墙原理。（<a href="[https://zh.wikipedia.org/wiki/%E8%B0%B7%E6%AD%8C%E9%80%80%E5%87%BA%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E4%BA%8B%E4%BB%B6](https://zh.wikipedia.org/wiki/谷歌退出中国大陆事件)">谷歌退出中国大陆详情</a>）  </p>
<h3 id="翻墙原理"><a href="#翻墙原理" class="headerlink" title="翻墙原理"></a>翻墙原理</h3><p>​        在讨论vpn、Proxy这些之前，我觉得有必要先提一下目前主流翻墙手段的实现原理。</p>
<p>​        GFW（中国防火长城，就是它阻止了你访问外网）实现网络封锁的手段主要有两种：dns劫持和ip封锁（除此之外，还有dns污染和关键词过滤，这里我们不讨论）。</p>
<p>​        Dns劫持：ip是网络上各主机的“地址”，要想访问“别人家”，当然得要有地址。但ip是一串数字，是给电脑看的，人记起来太麻烦，所以就有了域名（也就是我们常说的网址）和 <a href="https://zh.wikipedia.org/zh-hans/域名系统" target="_blank" rel="noopener">dns</a>（网域名称系统，Domain Name System）。域名是一串英文字符串，方便人记忆。dns将域名和ip关联起来，形成映射。用户访问域名所在的目标网站前，将域名发给dns服务器询问这对映射关系，拿到对应的ip后就可以在茫茫网海中找到那个“她”了。而GFW所做的就是站在用户和dns服务器之间，破坏它们的正常通讯，并向用户回传一个假ip。用户拿不到真正的ip，自然也就访问不到本想访问的网站了。</p>
<p>​        Dns劫持是GFW早期唯一的技术手段，所以那个时候的用户通过修改<a href="https://zh.wikipedia.org/wiki/Hosts文件" target="_blank" rel="noopener">Hosts</a>文件的方式就可以零成本突破封锁了。</p>
<p>​        ip封锁：dns劫持之后，GFW引入了ip封锁，直接锁住了访问目标网站的去路，用户发往被封锁ip的任何数据都会被墙截断。这个时候，依靠类似于修改Hosts文件这种低成本方法突破封锁就显得有些天方夜谭了。那么，解决办法是什么呢？答案是：在第三方架设翻墙服务器，中转与目标服务器间的来往流量。目前为止，GFW采用的是黑名单模式，像Google、Facebook这种在黑名单上的网站的ip无法访问，而不在黑名单上的第三方不记名ip可以。于是，一切就很明朗了，我们目前几乎所有的翻墙手段都是基于上述原理实现的，vpn是，shadowsocks是，还有一些比较冷门的（比如v2ray）同样如此，只不过它们的技术细节不同（这个我们不会深入）。</p>
<h4 id="一-VPN"><a href="#一-VPN" class="headerlink" title="一. VPN"></a>一. VPN</h4><p>​        Vpn，全称“虚拟私人网络（Virtual Private Network）”，是一种加密通讯技术。vpn是一个统称，它有很多的具体实现，比如PPTP、L2TP、IPSec和openvpn。vpn出现远早于GFW，所以它不是为了翻墙而生的。我上面说了，vpn是一种加密通讯技术，它被设计出来的目的是数据传输安全和网络匿名。</p>
<p>​        而既然不是为翻墙而生，那从翻墙的角度上讲，vpn协议就存在诸多问题。最严重的一个就是流量特征过于明显。墙目前已经能够精确识别绝大部分vpn协议的流量特征并给予封锁，所以，vpn这种翻墙方式基本已经废了。</p>
<p>​        但即便如此，vpn作为过去很长一段时间最主流最热门最常用最为人所知的翻墙手段，已然成为翻墙的代名词。即便是vpn已不再常用的今天，当人们谈及翻墙的时候，说得最多的仍是：“你有什么好用的vpn吗？”。</p>
<h4 id="二-Proxy（代理）"><a href="#二-Proxy（代理）" class="headerlink" title="二. Proxy（代理）"></a>二. Proxy（代理）</h4><h5 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1)反向代理"></a>1)反向代理</h5><p>​        Proxy（代理）又分为正向代理和反向代理。翻墙所用的代理都是正向代理。反向代理的作用主要是为服务器做缓存和负载均衡。这里不做过多讨论，感兴趣的朋友可以看<a href="https://zh.wikipedia.org/wiki/反向代理" target="_blank" rel="noopener">这里</a>。</p>
<p>​        顺带一提，shadowsocks里也有负载均衡的概念，但shadowsocks的负载均衡和反向代理的负载均衡不是一个概念。反向代理的负载均衡是指：在多个真正的服务器前架设一个代理服务器，用户所有的数据都发给代理服务器，然后代理服务器根据各个真实服务器的状态将数据转发给一个任务较少的服务器处理。这样，服务商既可以架设多个服务器分担任务、减轻压力，用户也只要记一个域名或ip就可以了。而shadowsocks的负载均衡是指：每隔一段时间更改一次翻墙服务器，将用户的数据平均发给多个不同的翻墙服务器，以避免发往某一个翻墙服务器的流量过多。</p>
<h5 id="2-正向代理"><a href="#2-正向代理" class="headerlink" title="2)正向代理"></a>2)正向代理</h5><p>​        正向代理主要有HTTP、HTTP over TLS(HTTPS)、Socks、Socks over TLS几种。其中，HTTP和Socks无法用于翻墙，HTTPS和Socks over TLS可以用于翻墙。不过，Socks over TLS几乎没人用，我们这里就不多说了。</p>
<p>​        Proxy的历史同样早于GFW，它最早被设计出来的目的当然也不是翻墙。正向代理最主要的目的和vpn差不多，都是用于匿名，但HTTP和Socks不能加密，只能匿名，HTTPS既可以匿名，也可以用于加密通信。</p>
<p>​        从理论上讲，四种代理协议都可以通过“用户先将数据发给代理服务器，再由代理服务器转发给目的服务器”的方法达到翻墙目的。但由于HTTP和Socks都是明文协议，GFW可以通过检查数据包内的内容得知用户的真实意图，进而拦截数据包。所以，HTTP和Socks一般只用作本地代理。而HTTPS协议是加密通讯，GFW无法得知数据包内的真实内容，类似于关键词过滤的手段无法施展。</p>
<p>​        不仅如此，HTTPS代理的流量特征和我们平时访问网站时所产生的HTTPS流量几乎一模一样，GFW无法分辨，稳定性爆表。</p>
<p>​        理论上讲，HTTPS代理无论是安全性，还是在隐匿性，都要比目前最为流行的shadowsocks好。事实上，在所有已知的翻墙协议中，无论是vpn协议，还是代理协议，它应该都是最好的。v2ray的vmess over tls也许能和HTTPS代理媲美。但v2ray存在的时间较短、使用者较少、社区也没有HTTPS代理活跃（从全球范围上看），故而，相比于HTTPS代理，vmess协议潜在的安全漏洞可能要多。</p>
<p>​        当然，HTTPS代理也有它的缺点，其中最大的缺点就是配置复杂。即便能用默认参数就用默认参数，用户自己只作最低限度的配置，对新手而言，这也是一个无比痛苦的过程。更别说，想要正常使用HTTPS代理，你还要购买域名和证书这些，非常麻烦。所以，即便是在shadowsocks出现之前，HTTPS代理也没在大陆流行起来。这也是造成v2ray的小众的主要原因之一（另一个是用户没有从shadowsocks迁移到v2ray的动力），它的配置同样相当复杂。除此之外，HTTPS代理只能转发tcp流量，对udp无能为力。</p>
<p>​        这里推荐刘亚晨先生的一篇文章「<a href="https://medium.com/@Blankwonder/各种加密代理协议的简单对比-1ed52bf7a803" target="_blank" rel="noopener">各种加密代理协议的简单对比</a>」。</p>
<h3 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h3><p>​        vps简单说就是一个远程的服务器，而服务器其实就是一个有特定功能的电脑。</p>
<p>​        大家不妨想一个问题：我们平时上网浏览网页，我们访问的那些网页都是哪来的？答案很简单，从另一台电脑上下载下来的。无论是用户平时所使用的个人pc，还是用于搭载网站的服务器，本质上都是电脑。但与个人pc不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。而vps，就是不会关机的电脑。</p>
<p>​        VPS（Virtual private server，虚拟专用服务器）是由vps提供商维护，租用给站长使用的“不会关机的电脑”。vps不是一台台独立的电脑，而是将一台巨型服务器通过虚拟化技术分割成若干台看似独立的服务器。这台巨型服务器不间断运行，被分割出来的小服务器也跟着不停的运作，站长租用其中一台小服务器，搭载上自己的站点，就可以等着用户访问了。</p>
<p>​        那么，个人电脑能不能做服务器呢？当然可以！我上面说，“与个人pc不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。”这句话反过来看，如果个人pc能做到24小时在线，它同样也可以用作服务器。事实上，有不少个人网站就是搭载在家中闲置的电脑上的。同时，还有人选择用树莓派、个人NAS建站。但是，由于大陆的ISP运营商面向普通网民提供的是动态ip，绑定域名很不方便，再加上宽带上网上下行网速不对等、网络稳定性不高等问题，大部分人还是选择使用vps建站。（除此之外，前一段时间，政府下达了新政令，要求运营商封禁个人宽带网络的443端口和80端口，至此，个人pc建站几无可能）。</p>
<p>​        那么，vps和vpn、Proxy以及我们后面会说的shadowsocks有什么关系呢？很简单，vps可以用来搭建网站，当然也可以用来承载vpn服务器、代理服务器或是shadowsocks的服务器啦。建站固然是vps最主要的作用，但绝对不是它唯一的作用，既然vps本质上也是电脑，那电脑能做的事它当然也能做。</p>
<h3 id="主流科学上网方式"><a href="#主流科学上网方式" class="headerlink" title="主流科学上网方式"></a>主流科学上网方式</h3><p>​        先重点聊一聊shadowsocks。</p>
<p>​        介绍之前，我这里先附上shadowsocks的<a href="http://www.shadowsocks.org/en/index.html" target="_blank" rel="noopener">官网链接</a>。英文比较好的同学建议看看官网上对shadowsocks的介绍。</p>
<p>​        在shadowsocks之前，墙内网民主要依靠寻找现成的技术实现翻墙。比如vpn、HTTPS、tor的中继网桥以及之后的meek插件等等，虽然也有自己的技术，比如一种依靠Google隐藏ip实现翻墙的技术（名字忘了）,但毕竟难成大器，再加上GFW逐渐加大对VPN的干扰，人们迫切需要一种简单可靠的技术来抵御GFW的进攻。</p>
<p>​        于是，大概是在2013年，<a href="https://github.com/clowwindy" target="_blank" rel="noopener">@clowwindy</a>带着他的shadowsocks横空出世。Shadowsocks同样是一种代理协议，但是作为clowwindy为国人设计的专门用于翻墙的代理协议，相对于vpn，shadowsocks有着极强的隐匿性；相对于HTTP代理，shadowsocks提供了较为完善的加密方案，虽然比不上HTTPS代理和vpn，但使用的也是成熟的工业级的加密算法，普通个人用户完全不用顾虑；相对于HTTPS代理，shadowsocks的安装配置更为简单，中文社区更为活跃，中文文档教程更完善，更符合中国国情。</p>
<p>​        Shdadowsocks最初的版本是由clowwindy使用Python（一种目前非常热门的脚本编程语言）实现的。所以clowwindy的版本被称为Python版。shadowsocks有点名气之后，不同的开发者使用不同的编程语言为其写了很多分支版本。比如，<a href="https://github.com/cyfdecyf" target="_blank" rel="noopener">@cyfdecyf</a>开发维护的Go版本，<a href="https://github.com/madeye" target="_blank" rel="noopener">@madeye</a>开发维护的libev版本（由纯C语言编写，基于libev库开发），由<a href="https://github.com/librehat" target="_blank" rel="noopener">@librehat</a>开发维护的c++版，由<a href="https://github.com/zhou0" target="_blank" rel="noopener">@zhou0</a>开发维护的Perl版。这些版本的安装使用指南都可以在shadowsocks的官网上查阅。</p>
<p>​        2015年，clowwindy因喝茶事件被迫停止了shadowsocks的维护，并删除了其开源在GitHub上的代码，Python版就此停滞。但其它版本仍处于维护更新中。其中，更新最频繁，新技术跟进最快的是由@madeye维护的libev版本。这里有必要说明下，目前，shadowsocks协议（请区分“shadowsocks协议”和“shadowsocks协议的具体实现”这两者的区别）是由shadowsocks社区内的成员共同维护，协议上任何新改进都是社区成员共同商讨的结果。但对这些变化，不同的版本的shadowsocks跟进速度不同。而跟进速度最快的就是我上面说的libev版。无论是<a href="https://github.com/shadowsocks/shadowsocks-org/issues/42" target="_blank" rel="noopener">SIP007</a>确认的ADEA Ciphers（一种同时进行认证和加密的算法），还是<a href="https://github.com/shadowsocks/shadowsocks-org/issues/28" target="_blank" rel="noopener">SIP003</a>引进的simple-obfs（tor开发的一种混淆插件），shadowsocks-libev都是最早引入自己软件的。</p>
<p>​        再简单说说v2ray</p>
<p>​        对于个人用户而言，现在用的最多的方法就是v2ray了。V2Ray是一个网络转发程序，支持 TCP、mKCP、WebSocket 这3种底层传输协议，支持HTTP、Socks、Shadowsocks、VMess这4种内容传输协议（HTTP只支持传入），并且有完整的TLS实现，是一个非常强大的平台。所以说v2ray实际上包含了shadowsocks，并且它采用了更加安全的加密方式，使其更难被GFW发现。在之后的博客中将会详细介绍这些主流方式的具体使用方法。</p>
<hr>
<h3 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h3><p>@thomas_summon、@goole</p>
]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
</search>
