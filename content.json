{"meta":{"title":"流浪北极星的blog","subtitle":"流浪北极星的blog","description":"科技于艺术造就生活","author":"John","url":"https://john-ssj.github.io","root":"/"},"pages":[{"title":"contact","date":"2020-06-12T10:17:17.000Z","updated":"2020-06-12T13:13:20.774Z","comments":false,"path":"contact/index.html","permalink":"https://john-ssj.github.io/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-06-12T06:17:37.000Z","updated":"2020-06-12T13:13:48.561Z","comments":false,"path":"categories/index.html","permalink":"https://john-ssj.github.io/categories/index.html","excerpt":"","text":""},{"title":"messageboard","date":"2020-06-12T12:57:13.000Z","updated":"2020-06-12T12:59:37.040Z","comments":true,"path":"messageboard/index.html","permalink":"https://john-ssj.github.io/messageboard/index.html","excerpt":"","text":""},{"title":"about","date":"2020-06-12T10:16:00.000Z","updated":"2020-06-15T08:06:47.370Z","comments":false,"path":"about/index.html","permalink":"https://john-ssj.github.io/about/index.html","excerpt":"","text":"#posts-chart,#categories-chart,#tags-chart{width: 100%;height: 300px;margin: 0.5rem auto;padding: 0.5rem;} &#x534E;&#x4E2D;&#x79D1;&#x6280;&#x5927;&#x5B66;&#x672C;&#x79D1;&#x751F;&#x4E00;&#x679A; &#x7F51;&#x7EDC;&#x79D1;&#x6280;&#x5B89;&#x5168;&#x4E13;&#x4E1A; let categoriesChart = echarts.init(document.getElementById('categories-chart')); let categoriesOption = { title: { text: '文章分类统计图', top: -4, x: 'center' }, tooltip: { trigger: 'item', formatter: \"{a} {b} : {c} ({d}%)\" }, series: [ { name: '分类', type: 'pie', radius: '50%', color: ['#6772e5', '#ff9e0f', '#fa755a', '#3ecf8e', '#82d3f4', '#ab47bc', '#525f7f', '#f51c47', '#26A69A'], data: [{\"name\":\"科学上网\",\"value\":2}], itemStyle: { emphasis: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } } } ] }; categoriesChart.setOption(categoriesOption); let tagsChart = echarts.init(document.getElementById('tags-chart')); let tagsOption = { title: { text: 'Top10标签统计图', top: -5, x: 'center' }, tooltip: {}, xAxis: [ { type: 'category', data: [\"科学上网\"] } ], yAxis: [ { type: 'value' } ], series: [ { type: 'bar', color: ['#82d3f4'], barWidth : 18, data: [2], markPoint: { symbolSize: 45, data: [{ type: 'max', itemStyle: {color: ['#3ecf8e']}, name: '最大值' }, { type: 'min', itemStyle: {color: ['#fa755a']}, name: '最小值' }], }, markLine: { itemStyle: {color: ['#ab47bc']}, data: [ {type: 'average', name: '平均值'} ] } } ] }; tagsChart.setOption(tagsOption); let postsChart = echarts.init(document.getElementById('posts-chart')); let postsOption = { title: { text: '文章发布统计图', top: -5, x: 'center' }, tooltip: { trigger: 'axis' }, xAxis: { type: 'category', data: [\"2019-06\",\"2019-07\",\"2019-08\",\"2019-09\",\"2019-10\",\"2019-11\",\"2019-12\",\"2020-01\",\"2020-02\",\"2020-03\",\"2020-04\",\"2020-05\",\"2020-06\"] }, yAxis: { type: 'value', }, series: [ { name: '文章篇数', type: 'line', color: ['#6772e5'], data: [0,0,0,0,0,0,0,0,0,0,0,0,2], markPoint: { symbolSize: 45, color: ['#fa755a','#3ecf8e','#82d3f4'], data: [{ type: 'max', itemStyle: {color: ['#3ecf8e']}, name: '最大值' }, { type: 'min', itemStyle: {color: ['#fa755a']}, name: '最小值' }] }, markLine: { itemStyle: {color: ['#ab47bc']}, data: [ {type: 'average', name: '平均值'} ] } } ] }; postsChart.setOption(postsOption);"},{"title":"gallery","date":"2020-06-13T09:52:46.000Z","updated":"2020-06-15T10:57:25.046Z","comments":true,"path":"gallery/index.html","permalink":"https://john-ssj.github.io/gallery/index.html","excerpt":"","text":""},{"title":"link","date":"2020-06-12T06:17:56.000Z","updated":"2020-06-13T13:06:51.936Z","comments":false,"path":"link/index.html","permalink":"https://john-ssj.github.io/link/index.html","excerpt":"","text":""},{"title":"movies","date":"2020-06-13T10:16:19.000Z","updated":"2020-06-13T10:16:43.557Z","comments":true,"path":"movies/index.html","permalink":"https://john-ssj.github.io/movies/index.html","excerpt":"","text":""},{"title":"music","date":"2020-06-13T09:52:27.000Z","updated":"2020-06-14T12:57:14.985Z","comments":true,"path":"music/index.html","permalink":"https://john-ssj.github.io/music/index.html","excerpt":"","text":"感受美妙的音乐吧！"},{"title":"tags","date":"2020-06-12T06:17:10.000Z","updated":"2020-06-12T13:12:25.557Z","comments":false,"path":"tags/index.html","permalink":"https://john-ssj.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"（三）搭建自己的v2ray","slug":"搭建自己的v2ray","date":"2020-06-12T03:45:32.000Z","updated":"2020-06-15T10:53:14.321Z","comments":true,"path":"2020/06/12/da-jian-zi-ji-de-v2ray/","link":"","permalink":"https://john-ssj.github.io/2020/06/12/da-jian-zi-ji-de-v2ray/","excerpt":"","text":"前言​ 总体说来，用这些插件或者免费的服务，不如用自己的更安心。不过搭建自己的v2ray需要投入一些成本和时间。对于普通朋友来说，如果你只想简单的科学上网，那么最好的方式就是购买别人搭建好的vpn（特别提醒，一定要选择大的平台，我之前使用过的“零点云”个人感觉还不错，一年不到100元）一般而言这些大平台的稳定性和速度都会比自己搭建的更加好，价格也会比自己搭建更便宜。 ​ 对于那些爱折腾或者想了解一下过程的朋友就可以继续往下看了。 ​ 主要的流程是：1）购买vps服务器 ​ 2）搭建v2ray ​ 3）在自己的电脑安装v2ray软件 ​ 4）连接&amp;快乐上网 购买vps服务器​ 我们选择的vps供应商的时候需要满足以下3个条件： ​ 1.vps服务器本身能够访问外网。也就是说国内的vps基本都不行。 ​ 2.我们能够与服务器之间建立连接。有些时候我们会发现我们无法于一些国外服务器建立连接，最可能的原因就是：这台服务器的ip地址，之前被他人用于搭建翻墙的服务器，但是由于操作不当或其他原因被GFW发现，于是GFW就将这个ip给封锁了，之后你就不能通过国内的网络访问这个ip了。当然，我们自己搭建的时候也会遇到各种问题，新手上路难免被GFW发现，因此选择一个能免费换ip的vps供应商对新生而言就至关重要。 ​ 3.vps供应商允许你搭建v2ray等服务。例如：阿里云等vps供应商就禁止你搭建自己的梯子（所谓搭梯子就是搭建自己的shadowsocks或v2ray）当你在阿里云的vps搭梯子时，会收到阿里云的邮件警告，如果继续搭梯子有可能会对你封号。 ​ 在这里我推荐的是Vultr。Vultr是按小时计费的，一个便宜的服务器一个月是5美元，其他vps可能也有5美元左右一个月的价格，但是很多都需要你购买一年。充值最低是10美元，可以使用支付宝支付（这个还是很方便的）第一次充值会送你100美元（这100美元要在第一个月用完），所以你可以在第一个月开很多高性能的服务器，并对不同地区的服务器做一个测试，看看那个地方的服务器速度最快。Vultr最大的好处就是可以免费更换ip，只要删除你的vps再重新建立一个vps就可以更换ip了。具体操作方法在后面会说明。 ​ 下面我就讲讲vultr的购买方式，点击Vultr进入官网。输入电子邮箱和密码点击注册就OK，邮箱需要写自己的邮箱（之后会发验证码和一些重要信息）其他的信息如电话号码，地址信息可以随意填写。注册完成并登录后可以来到Vultr的主页，接着可以点击左边的Billing进行充值（当然你也可以先到别的页面看一看） Billing页面选择Alipay（支付宝）进行支付即可。 接着来到Products页面，并点击中间的“Deploy Instance”部署一个vps。 这里选择“Cloud Compute”，我随便选了一个“Atlant”（亚特兰大）的节点，大家可以多搭建几个不同地区的服务器试试速度。 系统选择“Ubuntu20”，然后选择5美元一个月（它下面有写是按照小时扣费的，约0.007美元一小时。第一个月有100美元可以奢侈一把） 最后勾选”Enable IPv6 Enable“和“Enable Private Networking ”，然后再给它取个名字，我的给我的服务器取名叫“mars”。最后点击“Deploy Now”就开始部署了，只需要耐心等待3/5分钟，服务器显示绿色的“running”就完成啦。 搭建v2ray​ 部署玩服务器后进入服务器的管理页面，我们就可以用自带的连接页面进入命令行了。不过在此之前我们需要做的事情是确认我们能够与服务器之间建立连接。 测试能否ping通，并建立ssh连接只需要打开我们电脑的终端输入（这里的66.42.92.162需要换成你自己的ip地址）： 1ping 66.42.92.162 正常情况下你将看到如下的结果，说明你可以和你的vps建立联系。 12364 bytes from 66.42.92.162: icmp_seq=0 ttl=45 time=358.799 ms64 bytes from 66.42.92.162: icmp_seq=1 ttl=45 time=378.370 ms64 bytes from 66.42.92.162: icmp_seq=2 ttl=46 time=405.829 ms 但如果一直都显示 123Request timeout for icmp_seq 0Request timeout for icmp_seq 1Request timeout for icmp_seq 2 那就是你这个主机的ip被GFW墙了，这个时候你就只能点击右上角的彻底删除，并重复步骤一（你也可以先重开一台vps再删除，这样你可以确保第二次不会拿到和第一次一样的ip）。 如果可以链接成功，那我们我们就可以使用xshel（windows）或finalshell（mac）与vps进行ssh链接了。（这两个软件相比右上角自带的命令控制台最大的好处就是可以复制粘贴，当然还有其他的很多功能） 下载安装后我们进入finalshell的页面，并建立一个与vps的ssh连接。 之后双击新建的mars主机与其连接，第一次连接时会让你接受密钥，选择接受并保存。 安装BBR PLUS首先查看内核版本 1uname -a 这个是我的内核版本 1Linux mars 5.4.0-31-generic #35-Ubuntu SMP Thu May 7 20:20:34 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 在我们开始搭建v2ray之前我们首先要安装BBR Plus。这个是用来加速的，vultr的主机基本都已经安装了BBR，但BBR Plus效果更好一些。我们使用一键安装脚本来安装。 1wget --no-check-certificate -O tcp.sh https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh 会显示如下页面 1234567891011121314151617181920212223 TCP加速 一键安装管理脚本 [v1.3.1] -- 就是爱生活 | 94ish.me -- 0. 升级脚本————————————内核管理———————————— 1. 安装 BBR/BBR魔改版内核 2. 安装 BBRplus版内核 3. 安装 Lotserver(锐速)内核————————————加速管理———————————— 4. 使用BBR加速 5. 使用BBR魔改版加速 6. 使用暴力BBR魔改版加速(不支持部分系统) 7. 使用BBRplus版加速 8. 使用Lotserver(锐速)加速————————————杂项管理———————————— 9. 卸载全部加速 10. 系统配置优化 11. 退出脚本———————————————————————————————— 当前状态: 已安装 BBR 加速内核 , BBR启动成功 请输入数字 [0-11]: 我们选择2，之后它会进行安装，并跳出如下界面，我们需要选择no 之后我们要重启，会与vps断开连接。我们可以等30秒后再次与vps连接（随便按一下就会重新连接）。 我们继续打开脚本 1./tcp.sh 选择7，我们的BBR Plus就安装好了。 安装v2ray安装v2ray，同样的有一键安装脚本： 1bash &lt;(curl -s -L https://git.io/v2ray.sh) 输入1进行安装，并选择一系列参数（默认的只要回车就可以，一般来说只需要选择一个自己喜欢的端口，不要小于3000） 12345V2Ray 传输协议 = TCPV2Ray 端口 = 9999是否配置 Shadowsocks = 未配置 之后一路回车，完成配置。输入： 1v2ray url 生成 vmess URL 链接 1vmess://ewoidiI6ICIyIiwKInBzIjogIjIzM3YyLmNvbV82Ni40Mi45Mi4xNjIiLAoiYWRkIjogIjY2LjQyLjkyLjE2MiIsCiJwb3J0IjogIjk5OTkiLAoiaWQiOiAiNmFjOTU1MmMtZmFlNy00MTUwLWJjMzAtMTYzYTQzMzU1NDQzIiwKImFpZCI6ICIyMzMiLAoibmV0IjogInRjcCIsCiJ0eXBlIjogIm5vbmUiLAoiaG9zdCI6ICIiLAoicGF0aCI6ICIiLAoidGxzIjogIiIKfQo= 使用并测速现在我们打开自己电脑上的v2ray客户端（mac版下载V2rayU.dmg）（windows版下载）进行连接。 选择”服务器设置”导入刚才的那串 vmess:之后在服务区列表选择自己搭建的节点，就OK啦！来个4k视频体验一下速度把！（记得把浏览器上的其他科学上网插件都关掉哦） v2ray可是可以配置Shadowsocks大家可以自己研究捣鼓一下哦！ ps：不同节点速度差异还是挺大的，大家可以先去这里下载一下100m的测速包，大致感受一下下载速度。 以下是我感觉速度还不错的节点（记得区分延迟和速度哦，ping 的是延迟，下载最直观的是速度，一般来说不打游戏打话，延迟不是太大的问题哦）： 12345New York / New Jersey[美东 新泽西]Seattle, Washington[美东 华盛顿州 西雅图]Atlanta, Georgiaa[美东 乔治亚州 亚特兰大](Asia)Tokyo, Japan[日本 东京]Singapore[新加坡]","categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]},{"title":"（二）利用谷歌上网助手科学上网","slug":"谷歌上网助手","date":"2020-06-12T02:50:47.000Z","updated":"2020-06-13T10:29:54.380Z","comments":true,"path":"2020/06/12/gu-ge-shang-wang-zhu-shou/","link":"","permalink":"https://john-ssj.github.io/2020/06/12/gu-ge-shang-wang-zhu-shou/","excerpt":"","text":"利用谷歌上网助手科学上网​ 在了解了背景知识后，终于来到了正题如何最简单的上外网呢？今天我只讲一下最简单的通过谷歌助手插件上网。之后我也会更新其他科学上网方式。 第一步，下载谷歌浏览器。​ 在官网下载谷歌浏览器，打开超链接，点击网站中间的“下载Chrome”。下载后，根据提示安装即可。 第二步，安装谷歌上网助手​ 在没有翻墙的情况下，谷歌浏览器并不能上外网，它只是一个普通的浏览器，但是我们可以通过谷歌浏览器的插件，实现简单的上外网。谷歌上网助手就可以帮助我们使用谷歌搜索，访问谷歌应用商店等功能。 ​ 谷歌浏览助手可以在谷歌应用商店中下载，然而谷歌应用商店必须要翻墙才能访问，于是就陷入了死循环。so 我已经帮各位将其下载好啦。（点击下载谷歌上网助手） ​ 下载好连接中的文件并解压，打开后有一个“2.2.1_0”的文件夹。我们需要将其拖入谷歌浏览器的扩展程序中。扩展程序的打开方式如下图所示。 ​ 打开后是如下页面，我们需要将右上角开发者模式的卡关打开。 ​ 点击左上角“加载已解压的扩展程序”，将刚才下载解压后的“2.2.1_0”的文件夹载入，就安装完成啦。安装完成后，不要删除解压后的2.2.1_0”的文件夹。（如果有强迫症，可以找到电脑中的 Google/Chrome/Default/Extensions处，将整个文件放到这里） 第三步，注册谷歌上网助手。​ 点击右上角的图标，根据提示注册，可以使用任何邮箱注册。注册后再登陆。当点击图标出现如下界面就成功啦。 ​ 如果出现报错的提示，直接忽略就好，如果遇到无法解决的问题可以给我发邮件，我会尽力帮忙。 ​ 这时可以在谷歌中搜索或者访问左上角的应用商店下载更多好用的插件啦。（可能速度不是很快，可以稍微耐心等待几秒喔）建议先下载一个其他的科学上网软件，如：Astar VPN，然后删除自己安装的谷歌上网助手，再去应用商店重新下载（因为自己的安装的序列号不匹配，可能会报错，虽然不影响使用）。 ps：谷歌上网助手不可以上YouTube，大家可以在谷歌应用商店使用其他科学上网插件，或者看我之后的博客。","categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]},{"title":"（一）科学上网介绍","slug":"科学上网介绍","date":"2020-04-30T05:22:24.000Z","updated":"2020-06-13T10:30:02.020Z","comments":true,"path":"2020/04/30/ke-xue-shang-wang-jie-shao/","link":"","permalink":"https://john-ssj.github.io/2020/04/30/ke-xue-shang-wang-jie-shao/","excerpt":"","text":"历史背景​ 众所周知谷歌是一个优秀的学习工具，在谷歌可以查到许多的博客和英文的文献，特别是对于学习计算机相关方面的学生来说，谷歌更是不可或缺的。但是由于GFW ( 防火长城 ) 的存在，在中国大陆，自2010年起就不能访问外网了，谷歌也被列入外网行列。 ​ 而到目前为止，Google的所有产品在中国大陆境内均无法正常访问。提到翻墙（也就是我们常听到的“科学上网”或者“爱国上网”），有几个词很常见，即vpn、vps、Proxy和shadowsocks。刚接触翻墙的时候很容易被这个词的意思混淆。我们就在尽可能忽略那些晦涩难懂的技术细节，简单地讨论下翻墙原理。（谷歌退出中国大陆详情） 翻墙原理​ 在讨论vpn、Proxy这些之前，我觉得有必要先提一下目前主流翻墙手段的实现原理。 ​ GFW（中国防火长城，就是它阻止了你访问外网）实现网络封锁的手段主要有两种：dns劫持和ip封锁（除此之外，还有dns污染和关键词过滤，这里我们不讨论）。 ​ Dns劫持：ip是网络上各主机的“地址”，要想访问“别人家”，当然得要有地址。但ip是一串数字，是给电脑看的，人记起来太麻烦，所以就有了域名（也就是我们常说的网址）和 dns（网域名称系统，Domain Name System）。域名是一串英文字符串，方便人记忆。dns将域名和ip关联起来，形成映射。用户访问域名所在的目标网站前，将域名发给dns服务器询问这对映射关系，拿到对应的ip后就可以在茫茫网海中找到那个“她”了。而GFW所做的就是站在用户和dns服务器之间，破坏它们的正常通讯，并向用户回传一个假ip。用户拿不到真正的ip，自然也就访问不到本想访问的网站了。 ​ Dns劫持是GFW早期唯一的技术手段，所以那个时候的用户通过修改Hosts文件的方式就可以零成本突破封锁了。 ​ ip封锁：dns劫持之后，GFW引入了ip封锁，直接锁住了访问目标网站的去路，用户发往被封锁ip的任何数据都会被墙截断。这个时候，依靠类似于修改Hosts文件这种低成本方法突破封锁就显得有些天方夜谭了。那么，解决办法是什么呢？答案是：在第三方架设翻墙服务器，中转与目标服务器间的来往流量。目前为止，GFW采用的是黑名单模式，像Google、Facebook这种在黑名单上的网站的ip无法访问，而不在黑名单上的第三方不记名ip可以。于是，一切就很明朗了，我们目前几乎所有的翻墙手段都是基于上述原理实现的，vpn是，shadowsocks是，还有一些比较冷门的（比如v2ray）同样如此，只不过它们的技术细节不同（这个我们不会深入）。 一. VPN​ Vpn，全称“虚拟私人网络（Virtual Private Network）”，是一种加密通讯技术。vpn是一个统称，它有很多的具体实现，比如PPTP、L2TP、IPSec和openvpn。vpn出现远早于GFW，所以它不是为了翻墙而生的。我上面说了，vpn是一种加密通讯技术，它被设计出来的目的是数据传输安全和网络匿名。 ​ 而既然不是为翻墙而生，那从翻墙的角度上讲，vpn协议就存在诸多问题。最严重的一个就是流量特征过于明显。墙目前已经能够精确识别绝大部分vpn协议的流量特征并给予封锁，所以，vpn这种翻墙方式基本已经废了。 ​ 但即便如此，vpn作为过去很长一段时间最主流最热门最常用最为人所知的翻墙手段，已然成为翻墙的代名词。即便是vpn已不再常用的今天，当人们谈及翻墙的时候，说得最多的仍是：“你有什么好用的vpn吗？”。 二. Proxy（代理）1)反向代理​ Proxy（代理）又分为正向代理和反向代理。翻墙所用的代理都是正向代理。反向代理的作用主要是为服务器做缓存和负载均衡。这里不做过多讨论，感兴趣的朋友可以看这里。 ​ 顺带一提，shadowsocks里也有负载均衡的概念，但shadowsocks的负载均衡和反向代理的负载均衡不是一个概念。反向代理的负载均衡是指：在多个真正的服务器前架设一个代理服务器，用户所有的数据都发给代理服务器，然后代理服务器根据各个真实服务器的状态将数据转发给一个任务较少的服务器处理。这样，服务商既可以架设多个服务器分担任务、减轻压力，用户也只要记一个域名或ip就可以了。而shadowsocks的负载均衡是指：每隔一段时间更改一次翻墙服务器，将用户的数据平均发给多个不同的翻墙服务器，以避免发往某一个翻墙服务器的流量过多。 2)正向代理​ 正向代理主要有HTTP、HTTP over TLS(HTTPS)、Socks、Socks over TLS几种。其中，HTTP和Socks无法用于翻墙，HTTPS和Socks over TLS可以用于翻墙。不过，Socks over TLS几乎没人用，我们这里就不多说了。 ​ Proxy的历史同样早于GFW，它最早被设计出来的目的当然也不是翻墙。正向代理最主要的目的和vpn差不多，都是用于匿名，但HTTP和Socks不能加密，只能匿名，HTTPS既可以匿名，也可以用于加密通信。 ​ 从理论上讲，四种代理协议都可以通过“用户先将数据发给代理服务器，再由代理服务器转发给目的服务器”的方法达到翻墙目的。但由于HTTP和Socks都是明文协议，GFW可以通过检查数据包内的内容得知用户的真实意图，进而拦截数据包。所以，HTTP和Socks一般只用作本地代理。而HTTPS协议是加密通讯，GFW无法得知数据包内的真实内容，类似于关键词过滤的手段无法施展。 ​ 不仅如此，HTTPS代理的流量特征和我们平时访问网站时所产生的HTTPS流量几乎一模一样，GFW无法分辨，稳定性爆表。 ​ 理论上讲，HTTPS代理无论是安全性，还是在隐匿性，都要比目前最为流行的shadowsocks好。事实上，在所有已知的翻墙协议中，无论是vpn协议，还是代理协议，它应该都是最好的。v2ray的vmess over tls也许能和HTTPS代理媲美。但v2ray存在的时间较短、使用者较少、社区也没有HTTPS代理活跃（从全球范围上看），故而，相比于HTTPS代理，vmess协议潜在的安全漏洞可能要多。 ​ 当然，HTTPS代理也有它的缺点，其中最大的缺点就是配置复杂。即便能用默认参数就用默认参数，用户自己只作最低限度的配置，对新手而言，这也是一个无比痛苦的过程。更别说，想要正常使用HTTPS代理，你还要购买域名和证书这些，非常麻烦。所以，即便是在shadowsocks出现之前，HTTPS代理也没在大陆流行起来。这也是造成v2ray的小众的主要原因之一（另一个是用户没有从shadowsocks迁移到v2ray的动力），它的配置同样相当复杂。除此之外，HTTPS代理只能转发tcp流量，对udp无能为力。 ​ 这里推荐刘亚晨先生的一篇文章「各种加密代理协议的简单对比」。 vps​ vps简单说就是一个远程的服务器，而服务器其实就是一个有特定功能的电脑。 ​ 大家不妨想一个问题：我们平时上网浏览网页，我们访问的那些网页都是哪来的？答案很简单，从另一台电脑上下载下来的。无论是用户平时所使用的个人pc，还是用于搭载网站的服务器，本质上都是电脑。但与个人pc不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。而vps，就是不会关机的电脑。 ​ VPS（Virtual private server，虚拟专用服务器）是由vps提供商维护，租用给站长使用的“不会关机的电脑”。vps不是一台台独立的电脑，而是将一台巨型服务器通过虚拟化技术分割成若干台看似独立的服务器。这台巨型服务器不间断运行，被分割出来的小服务器也跟着不停的运作，站长租用其中一台小服务器，搭载上自己的站点，就可以等着用户访问了。 ​ 那么，个人电脑能不能做服务器呢？当然可以！我上面说，“与个人pc不同，被用作服务器的电脑必须做到24小时开机在线，以确保能在任何时候回应用户的请求。”这句话反过来看，如果个人pc能做到24小时在线，它同样也可以用作服务器。事实上，有不少个人网站就是搭载在家中闲置的电脑上的。同时，还有人选择用树莓派、个人NAS建站。但是，由于大陆的ISP运营商面向普通网民提供的是动态ip，绑定域名很不方便，再加上宽带上网上下行网速不对等、网络稳定性不高等问题，大部分人还是选择使用vps建站。（除此之外，前一段时间，政府下达了新政令，要求运营商封禁个人宽带网络的443端口和80端口，至此，个人pc建站几无可能）。 ​ 那么，vps和vpn、Proxy以及我们后面会说的shadowsocks有什么关系呢？很简单，vps可以用来搭建网站，当然也可以用来承载vpn服务器、代理服务器或是shadowsocks的服务器啦。建站固然是vps最主要的作用，但绝对不是它唯一的作用，既然vps本质上也是电脑，那电脑能做的事它当然也能做。 主流科学上网方式​ 先重点聊一聊shadowsocks。 ​ 介绍之前，我这里先附上shadowsocks的官网链接。英文比较好的同学建议看看官网上对shadowsocks的介绍。 ​ 在shadowsocks之前，墙内网民主要依靠寻找现成的技术实现翻墙。比如vpn、HTTPS、tor的中继网桥以及之后的meek插件等等，虽然也有自己的技术，比如一种依靠Google隐藏ip实现翻墙的技术（名字忘了）,但毕竟难成大器，再加上GFW逐渐加大对VPN的干扰，人们迫切需要一种简单可靠的技术来抵御GFW的进攻。 ​ 于是，大概是在2013年，@clowwindy带着他的shadowsocks横空出世。Shadowsocks同样是一种代理协议，但是作为clowwindy为国人设计的专门用于翻墙的代理协议，相对于vpn，shadowsocks有着极强的隐匿性；相对于HTTP代理，shadowsocks提供了较为完善的加密方案，虽然比不上HTTPS代理和vpn，但使用的也是成熟的工业级的加密算法，普通个人用户完全不用顾虑；相对于HTTPS代理，shadowsocks的安装配置更为简单，中文社区更为活跃，中文文档教程更完善，更符合中国国情。 ​ Shdadowsocks最初的版本是由clowwindy使用Python（一种目前非常热门的脚本编程语言）实现的。所以clowwindy的版本被称为Python版。shadowsocks有点名气之后，不同的开发者使用不同的编程语言为其写了很多分支版本。比如，@cyfdecyf开发维护的Go版本，@madeye开发维护的libev版本（由纯C语言编写，基于libev库开发），由@librehat开发维护的c++版，由@zhou0开发维护的Perl版。这些版本的安装使用指南都可以在shadowsocks的官网上查阅。 ​ 2015年，clowwindy因喝茶事件被迫停止了shadowsocks的维护，并删除了其开源在GitHub上的代码，Python版就此停滞。但其它版本仍处于维护更新中。其中，更新最频繁，新技术跟进最快的是由@madeye维护的libev版本。这里有必要说明下，目前，shadowsocks协议（请区分“shadowsocks协议”和“shadowsocks协议的具体实现”这两者的区别）是由shadowsocks社区内的成员共同维护，协议上任何新改进都是社区成员共同商讨的结果。但对这些变化，不同的版本的shadowsocks跟进速度不同。而跟进速度最快的就是我上面说的libev版。无论是SIP007确认的ADEA Ciphers（一种同时进行认证和加密的算法），还是SIP003引进的simple-obfs（tor开发的一种混淆插件），shadowsocks-libev都是最早引入自己软件的。 ​ 再简单说说v2ray ​ 对于个人用户而言，现在用的最多的方法就是v2ray了。V2Ray是一个网络转发程序，支持 TCP、mKCP、WebSocket 这3种底层传输协议，支持HTTP、Socks、Shadowsocks、VMess这4种内容传输协议（HTTP只支持传入），并且有完整的TLS实现，是一个非常强大的平台。所以说v2ray实际上包含了shadowsocks，并且它采用了更加安全的加密方式，使其更难被GFW发现。在之后的博客中将会详细介绍这些主流方式的具体使用方法。 特别鸣谢@thomas_summon、@goole","categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]}],"categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://john-ssj.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]}